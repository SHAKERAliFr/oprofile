{"version":3,"sources":["assets/js/carousel.js","assets/main.js"],"names":["console","log","carousel","slidesContainer","buttons","lastClickDate","timer","currentSlide","duration","init","document","querySelector","querySelectorAll","button","addEventListener","handleClick","start","checkAutoRestart","setInterval","currentDate","Date","currentTimestamp","getTime","elapsed","newSlide","newSlideToDisplay","length","click","evt","isTrusted","stop","preventDefault","clickedButton","currentTarget","slideToDisplay","dataset","slideNumber","displaySlide","setCurrentButton","clearInterval","currentButton","classList","remove","add","slideWidth","offsetWidth","horizontalScroll","scroll"],"mappings":"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","file":"main.bcdc44b9.js","sourceRoot":"..","sourcesContent":["console.log(\"CAROUSEL.js Chargé !\");\n\nconst carousel = {\n    // cette propriété nous permet de cibler la div contenant les \"slides\"\n    slidesContainer: null,\n    // propriété permettant de récupérer les differents boutons qui déclencheront l'animation du carousel\n    buttons: null,\n    // stocke la date du dernier clic\n    lastClickDate: null,\n    // cette propriété stockera le timer de l'auto slide\n    timer: null,\n    // le carousel commence par defaut à la slide numéro 0\n    currentSlide: 0,\n    // temps pour l'autoscroll\n    duration: 2000,\n\n\n    init: function(){\n        console.log('Methode init');\n        // je cible la div contenant les \"slides\" pour la ranger dans la propriété \"slidesContainer\"\n        carousel.slidesContainer = document.querySelector('.customer-quotes__container');\n\n        //je cible tous boutons :\n        carousel.buttons = document.querySelectorAll('.carousel__nav__button');\n\n        // Boucle qui va parcourir mon tableau de boutons\n        for(let button of carousel.buttons){\n            button.addEventListener('click', carousel.handleClick);\n        }\n\n        carousel.start();\n        carousel.checkAutoRestart();\n    },\n\n\n    // lorsque je clic sur un bouton, je dois arreter le défilement automatique, il faut vérifier quand reprendre le défilement automatique, pour se faire on a codé la methode suivante avec un setInterval en 5500ms (donc on va avoir un morceau de code qui va se s'exectuer toute les demi secondes)\n    checkAutoRestart: function(){\n        setInterval(function(){\n            console.log('je suis dans checkAutoRestart');\n            // je récupère la date actuelle\n            const currentDate = new Date();\n            const currentTimestamp = currentDate.getTime();\n            //console.log('timestamp actuel : ' + currentTimestamp );\n\n            // si il y a déjà eu un VRAI clic utilisateur\n            if(carousel.lastClickDate){\n                // alors je calcule le temps qui s'est écoulé entre le VRAI clic utilisateur et MAINTENANT !\n                let elapsed = currentTimestamp - carousel.lastClickDate;\n                console.log('temps écoulé depuis dernier clic : ' + elapsed );\n\n                if(elapsed > 3000){\n                    carousel.lastClickDate = null;\n                    carousel.start();\n                }\n\n\n            }\n        }, 500);\n    },\n\n\n\n\n    // methode pour lancer le defilement automatique\n    start: function(){\n        carousel.timer = setInterval(\n            function(){\n                let newSlide = carousel.currentSlide++;\n                let newSlideToDisplay = newSlide % carousel.buttons.length;\n                //console.log(newSlideToDisplay)\n                // Illustration du modulo (le reste d'une division)\n                // 1 / 3 le reste de la division vaut 1\n                // 2 / 3 le reste de la division vaut 2 \n                // 3 / 3 le reste de la division vaut 0\n                // 4 / 3 le reste de la division vaut 1\n                // 5 / 3 le reste de la division vaut 2\n                // 6 / 3 le reste de la division vaut 0\n\n                carousel.buttons[newSlideToDisplay].click();\n\n            }, \n            carousel.duration);\n    },\n\n    // methode click sur bouton\n    handleClick: function(evt){\n        // vérification : est ce que le clock est vraiment un click déclenché par le visiteur \n        if(evt.isTrusted){\n            console.log('VRAI CLIC, je viens sauvegarder dans la propriété carousel.lastClickDate le timestamp !');\n             //! ci dessous, ce morceau de code vas nous permettre de gérer le defilement auto / l'arret du defilement auto de mon diapo\n            // enregistrement de la date du click du visiteur\n            // je récupère un objet et grace a la methode getTime()\n            // je vais pouvoir récupérer le timestamp\n            const currentDate = new Date();\n            //console.log(currentDate.getTime());\n            carousel.lastClickDate = currentDate.getTime();\n            carousel.stop();\n        }\n\n        // par sécurité, nous préférons interdire le comportement par defaut\n        evt.preventDefault();\n\n        // nous avons besoin de savoir sur quel bouton j'ai cliqué\n        const clickedButton = evt.currentTarget;\n\n        let slideToDisplay = clickedButton.dataset.slideNumber;\n        /*\n        console.log('dataset SlideNumer : ' +  clickedButton.dataset.slideNumber);\n        clickedButton.style.backgroundColor = \"#f0f\";\n        clickedButton.style.borderRadius = \"20px\";\n        */\n        carousel.displaySlide(slideToDisplay);\n        // méthode pour ajouter la classe active au bouton sur lequel j'ai cliqué\n        // je lui donne un ELEMENT bouton\n        carousel.setCurrentButton(clickedButton);\n    },\n\n    // methode pour arreter le défilement auto\n    stop: function(){\n       clearInterval(carousel.timer);\n    },\n\n    // methode pour colorer le bouton cliqué en bleu\n    setCurrentButton: function(clickedButton){\n        // je veux avant toute chose cibler le bouton\n        // qui est actuelement en bleu, avant de colorer le bouton sur lequel j'ai cliqué\n        // ->\n        // je cible l'élement qui a pour classe carousel__nav__button ET la classe active\n        const currentButton = document.querySelector('.carousel__nav__button.active');\n        currentButton.classList.remove('active');\n        // maintenant il ne me reste plus qu'a ajouter la classe active au bouton clickedButton\n        clickedButton.classList.add('active');\n    },\n\n    // methode pour afficher une slide\n    displaySlide: function(slideNumber){\n        // il faut faire scroller horizontalement l'élément contenant les slides.\n        // pour se faire nous avons besoin de connaitre la largeur d'une silde, puis de la multiplier par le numéro de la slide demandé \n\n        // récupération de la largeur d'une slide en pixels\n        let slideWidth = carousel.slidesContainer.offsetWidth;\n        /*\n        console.log('Je dois afficher la slide : ' + slideNumber + ', et la largeur du conteneur des slides est de : ' + slideWidth );\n        */\n        // calcul du scroll horizontal à effectuer pour afficher la slide demandée\n        let horizontalScroll = slideWidth * slideNumber;\n        //console.log(slideWidth + '*' +  slideNumber + '=' + horizontalScroll);\n\n        // nous faison scroller le container des slides\n        carousel.slidesContainer.scroll(horizontalScroll,0);\n    }\n\n};\n\n\ndocument.addEventListener('DOMContentLoaded', carousel.init);\n","import './scss/main.scss' // le style\nimport './js/carousel.js'\nimport '@fortawesome/fontawesome-free/css/all.css' // font awesome"]}